// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package scheduler

import (
	"bytes"
	"fmt"
	"github.com/elves-project/agent/src/thrift/apache-thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type SchedulerService interface {
	AliveCheck() (r string, err error)
	// Parameters:
	//  - Reins
	DataTransport(reins *Reinstruct) (r string, err error)
	// Parameters:
	//  - Ins
	InstructionTransit(ins *Instruct) (r *Reinstruct, err error)
}

type SchedulerServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewSchedulerServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SchedulerServiceClient {
	return &SchedulerServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewSchedulerServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SchedulerServiceClient {
	return &SchedulerServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (p *SchedulerServiceClient) AliveCheck() (r string, err error) {
	if err = p.sendAliveCheck(); err != nil {
		return
	}
	return p.recvAliveCheck()
}

func (p *SchedulerServiceClient) sendAliveCheck() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("aliveCheck", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SchedulerServiceAliveCheckArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SchedulerServiceClient) recvAliveCheck() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "aliveCheck" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "aliveCheck failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "aliveCheck failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "aliveCheck failed: invalid message type")
		return
	}
	result := SchedulerServiceAliveCheckResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Reins
func (p *SchedulerServiceClient) DataTransport(reins *Reinstruct) (r string, err error) {
	if err = p.sendDataTransport(reins); err != nil {
		return
	}
	return p.recvDataTransport()
}

func (p *SchedulerServiceClient) sendDataTransport(reins *Reinstruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("dataTransport", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SchedulerServiceDataTransportArgs{
		Reins: reins,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SchedulerServiceClient) recvDataTransport() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "dataTransport" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "dataTransport failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "dataTransport failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dataTransport failed: invalid message type")
		return
	}
	result := SchedulerServiceDataTransportResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Ins
func (p *SchedulerServiceClient) InstructionTransit(ins *Instruct) (r *Reinstruct, err error) {
	if err = p.sendInstructionTransit(ins); err != nil {
		return
	}
	return p.recvInstructionTransit()
}

func (p *SchedulerServiceClient) sendInstructionTransit(ins *Instruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("instructionTransit", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SchedulerServiceInstructionTransitArgs{
		Ins: ins,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SchedulerServiceClient) recvInstructionTransit() (value *Reinstruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "instructionTransit" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "instructionTransit failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "instructionTransit failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "instructionTransit failed: invalid message type")
		return
	}
	result := SchedulerServiceInstructionTransitResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type SchedulerServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SchedulerService
}

func (p *SchedulerServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SchedulerServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SchedulerServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSchedulerServiceProcessor(handler SchedulerService) *SchedulerServiceProcessor {

	self6 := &SchedulerServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self6.processorMap["aliveCheck"] = &schedulerServiceProcessorAliveCheck{handler: handler}
	self6.processorMap["dataTransport"] = &schedulerServiceProcessorDataTransport{handler: handler}
	self6.processorMap["instructionTransit"] = &schedulerServiceProcessorInstructionTransit{handler: handler}
	return self6
}

func (p *SchedulerServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x7.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x7

}

type schedulerServiceProcessorAliveCheck struct {
	handler SchedulerService
}

func (p *schedulerServiceProcessorAliveCheck) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SchedulerServiceAliveCheckArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("aliveCheck", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SchedulerServiceAliveCheckResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AliveCheck(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing aliveCheck: "+err2.Error())
		oprot.WriteMessageBegin("aliveCheck", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("aliveCheck", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type schedulerServiceProcessorDataTransport struct {
	handler SchedulerService
}

func (p *schedulerServiceProcessorDataTransport) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SchedulerServiceDataTransportArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("dataTransport", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SchedulerServiceDataTransportResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.DataTransport(args.Reins); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dataTransport: "+err2.Error())
		oprot.WriteMessageBegin("dataTransport", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("dataTransport", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type schedulerServiceProcessorInstructionTransit struct {
	handler SchedulerService
}

func (p *schedulerServiceProcessorInstructionTransit) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SchedulerServiceInstructionTransitArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("instructionTransit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SchedulerServiceInstructionTransitResult{}
	var retval *Reinstruct
	var err2 error
	if retval, err2 = p.handler.InstructionTransit(args.Ins); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing instructionTransit: "+err2.Error())
		oprot.WriteMessageBegin("instructionTransit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("instructionTransit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type SchedulerServiceAliveCheckArgs struct {
}

func NewSchedulerServiceAliveCheckArgs() *SchedulerServiceAliveCheckArgs {
	return &SchedulerServiceAliveCheckArgs{}
}

func (p *SchedulerServiceAliveCheckArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SchedulerServiceAliveCheckArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("aliveCheck_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SchedulerServiceAliveCheckArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SchedulerServiceAliveCheckArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SchedulerServiceAliveCheckResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewSchedulerServiceAliveCheckResult() *SchedulerServiceAliveCheckResult {
	return &SchedulerServiceAliveCheckResult{}
}

var SchedulerServiceAliveCheckResult_Success_DEFAULT string

func (p *SchedulerServiceAliveCheckResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return SchedulerServiceAliveCheckResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *SchedulerServiceAliveCheckResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SchedulerServiceAliveCheckResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SchedulerServiceAliveCheckResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SchedulerServiceAliveCheckResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("aliveCheck_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SchedulerServiceAliveCheckResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SchedulerServiceAliveCheckResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SchedulerServiceAliveCheckResult(%+v)", *p)
}

// Attributes:
//  - Reins
type SchedulerServiceDataTransportArgs struct {
	Reins *Reinstruct `thrift:"reins,1" json:"reins"`
}

func NewSchedulerServiceDataTransportArgs() *SchedulerServiceDataTransportArgs {
	return &SchedulerServiceDataTransportArgs{}
}

var SchedulerServiceDataTransportArgs_Reins_DEFAULT *Reinstruct

func (p *SchedulerServiceDataTransportArgs) GetReins() *Reinstruct {
	if !p.IsSetReins() {
		return SchedulerServiceDataTransportArgs_Reins_DEFAULT
	}
	return p.Reins
}
func (p *SchedulerServiceDataTransportArgs) IsSetReins() bool {
	return p.Reins != nil
}

func (p *SchedulerServiceDataTransportArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SchedulerServiceDataTransportArgs) readField1(iprot thrift.TProtocol) error {
	p.Reins = &Reinstruct{}
	if err := p.Reins.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Reins), err)
	}
	return nil
}

func (p *SchedulerServiceDataTransportArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("dataTransport_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SchedulerServiceDataTransportArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reins", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reins: ", p), err)
	}
	if err := p.Reins.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Reins), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reins: ", p), err)
	}
	return err
}

func (p *SchedulerServiceDataTransportArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SchedulerServiceDataTransportArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SchedulerServiceDataTransportResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewSchedulerServiceDataTransportResult() *SchedulerServiceDataTransportResult {
	return &SchedulerServiceDataTransportResult{}
}

var SchedulerServiceDataTransportResult_Success_DEFAULT string

func (p *SchedulerServiceDataTransportResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return SchedulerServiceDataTransportResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *SchedulerServiceDataTransportResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SchedulerServiceDataTransportResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SchedulerServiceDataTransportResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SchedulerServiceDataTransportResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("dataTransport_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SchedulerServiceDataTransportResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SchedulerServiceDataTransportResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SchedulerServiceDataTransportResult(%+v)", *p)
}

// Attributes:
//  - Ins
type SchedulerServiceInstructionTransitArgs struct {
	Ins *Instruct `thrift:"ins,1" json:"ins"`
}

func NewSchedulerServiceInstructionTransitArgs() *SchedulerServiceInstructionTransitArgs {
	return &SchedulerServiceInstructionTransitArgs{}
}

var SchedulerServiceInstructionTransitArgs_Ins_DEFAULT *Instruct

func (p *SchedulerServiceInstructionTransitArgs) GetIns() *Instruct {
	if !p.IsSetIns() {
		return SchedulerServiceInstructionTransitArgs_Ins_DEFAULT
	}
	return p.Ins
}
func (p *SchedulerServiceInstructionTransitArgs) IsSetIns() bool {
	return p.Ins != nil
}

func (p *SchedulerServiceInstructionTransitArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SchedulerServiceInstructionTransitArgs) readField1(iprot thrift.TProtocol) error {
	p.Ins = &Instruct{}
	if err := p.Ins.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ins), err)
	}
	return nil
}

func (p *SchedulerServiceInstructionTransitArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("instructionTransit_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SchedulerServiceInstructionTransitArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ins", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ins: ", p), err)
	}
	if err := p.Ins.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ins), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ins: ", p), err)
	}
	return err
}

func (p *SchedulerServiceInstructionTransitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SchedulerServiceInstructionTransitArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SchedulerServiceInstructionTransitResult struct {
	Success *Reinstruct `thrift:"success,0" json:"success,omitempty"`
}

func NewSchedulerServiceInstructionTransitResult() *SchedulerServiceInstructionTransitResult {
	return &SchedulerServiceInstructionTransitResult{}
}

var SchedulerServiceInstructionTransitResult_Success_DEFAULT *Reinstruct

func (p *SchedulerServiceInstructionTransitResult) GetSuccess() *Reinstruct {
	if !p.IsSetSuccess() {
		return SchedulerServiceInstructionTransitResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SchedulerServiceInstructionTransitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SchedulerServiceInstructionTransitResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SchedulerServiceInstructionTransitResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Reinstruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SchedulerServiceInstructionTransitResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("instructionTransit_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SchedulerServiceInstructionTransitResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SchedulerServiceInstructionTransitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SchedulerServiceInstructionTransitResult(%+v)", *p)
}
